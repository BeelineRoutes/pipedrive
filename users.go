/** ****************************************************************************************************************** **
	Calls related to users (crew)

    
** ****************************************************************************************************************** **/

package pipedrive 

import (
    "fmt"
    "net/http"
    "context"
)

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- CONSTS ----------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- STRUCTS ---------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

type User struct {
    Id int
    Name, Email, Timezone_name string 
    Active_flag bool 
}

type usersResponse struct {
    Data []*User
}

// takes the jobs out of whatever this parent object is for
func (this usersResponse) toUsers () (ret []*User) {
    for _, m := range this.Data {
        if m.Active_flag == false { continue }
        
        // they're good to get jobs
        ret = append (ret, m)
    }
    return 
}

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- PRIVATE FUNCTIONS -----------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- FUNCTIONS -------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

// returns all jobs that match our conditions
func (this *Pipedrive) ListUsers (ctx context.Context, bearer, domain string) ([]*User, error) {
    var resp usersResponse
    header := make(map[string]string)
    header["Authorization"] = "Bearer " + bearer 
    
    err := this.send (ctx, http.MethodGet, fmt.Sprintf("%s/v1/users", domain), header, nil, &resp)
    if err != nil { return nil, err } // bail
    
    return resp.toUsers(), nil // we're good
}
