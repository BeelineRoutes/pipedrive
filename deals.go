/** ****************************************************************************************************************** **
	Calls related to orgs

    
** ****************************************************************************************************************** **/

package pipedrive 

import (
    "github.com/pkg/errors"
    
    "fmt"
    "net/http"
    "context"
)

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- CONSTS ----------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- STRUCTS ---------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

type Deal struct {
    Id int
    Org_id struct {
        Address string 
    }
}

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- PRIVATE FUNCTIONS -----------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

  //-----------------------------------------------------------------------------------------------------------------------//
 //----- FUNCTIONS -------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------//

// returns all jobs that match our conditions
func (this *Pipedrive) GetDeal (ctx context.Context, bearer, domain string, dealId int) (*Deal, error) {
    var resp struct {
        Success bool 
        Data *Deal
    }

    header := make(map[string]string)
    header["Authorization"] = "Bearer " + bearer 
    
    err := this.send (ctx, http.MethodGet, fmt.Sprintf("%s/v1/deals/%d", domain, dealId), header, nil, &resp)
    if err != nil { return nil, err } // bail

    if resp.Success == false {
        return nil, errors.Errorf("Success was false : %s : %d", domain, dealId)
    }
    
    return resp.Data, nil // we're good
}
